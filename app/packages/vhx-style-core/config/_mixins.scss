@import "variables";
@import "../../vhx-style-colors/config/variables";

$arrow-colors: #000000, #ffffff, $gray-1, $red, $teal-2;
$arrow-classes: 'background-black', 'background-white', 'background-gray', 'is-alert', 'is-error', 'is-success';

// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range, 1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

@mixin arrow-colors($position) {
  $primary-pos: bottom;
  $secondary-pos: top;
  $tertiary-pos: left;
  $pos: left, middle, right;

  @if $position == top {
    $primary-pos: top;
    $secondary-pos: bottom;
    $tertiary-pos: left;
    $pos: left, middle, right;
  } @else if $position == right {
    $primary-pos: right;
    $secondary-pos: left;
    $tertiary-pos: bottom;
    $pos: top, middle, bottom;
  } @else if $position == left {
    $primary-pos: left;
    $secondary-pos: right;
    $tertiary-pos: top;
    $pos: top, middle, bottom;
  }

  &.arrow-#{$primary-pos}-#{nth($pos, 1)},
  &.arrow-#{$primary-pos}-#{nth($pos, 2)},
  &.arrow-#{$primary-pos}-#{nth($pos, 3)} {
    &:after {
      border-#{$secondary-pos}-color: #192b3d;
      margin-#{$tertiary-pos}: -10px;
    }
    &:before {
      border-#{$secondary-pos}-right-color: #192b3d;
      margin-#{$tertiary-pos}: -11px;
    }

    @for $i from 1 through length($arrow-colors) {
      $arrow-color: nth($arrow-colors, $i);
      $arrow-class: nth($arrow-classes, $i);
      &.#{$arrow-class} {
        background: $arrow-color;
        &:after {
          border-#{$secondary-pos}-color: $arrow-color;
        }
        &:before {
          border-#{$secondary-pos}-color: $arrow-color;
        }
      }
    }
  }
}


@mixin cf() {
  &:after {
    clear: both;
  }
  &:before,
  &:after {
    content: " ";
    display: table;
  }
}


// user avatars
// initially used on updates and comments
@mixin user-circle-avatar($size) {
  float: left;
  color: #fff;
  text-align: center;
  width: $size;
  height: $size;
  line-height: $size;
  border-radius: $size / 2;
  overflow: hidden;
  position: relative;
  z-index: 1;
  .avatar-img {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: $size;
    height: $size;
    border-radius: $size / 2;
    background-size: cover;
    z-index: 1;
  }
}

// helpers
// initially used on updates
%reset-list {
  @include cf();
  padding-left: 0;
  margin: 0;
  list-style-type: none;
}
%horizontal-list {
  @extend %reset-list;
  li {
    float: left;
  }
}

// text truncation
%truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin arrow($color, $color-rgb, $border-color, $border-color-rgb, $border-width, $width, $side) {
  position: relative;
  background: $color;
  border: #{$border-width}px solid $border-color;

  &:after, &:before {
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
  }
  @if $side == 'left' {
    &:after {
      border-color: $color-rgb;
      border-right-color: $border-color;
      border-width: #{$width}px;
      margin-top: -#{$width}px;
    }
    &:before {
      border-color: $color-rgb;
      border-right-color: $border-color;
      border-width: #{$width+1}px;
      margin-top: -#{$width+1}px;
    }
  }
  @if $side == 'top' {
    &:after {
      border-color: $color-rgb;
      border-bottom-color: $border-color;
      border-width: #{$width}px;
      margin-left: -#{$width}px;
    }
    &:before {
      border-color: $color-rgb;
      border-bottom-color: $border-color;
      border-width: #{$width+1}px;
      margin-left: -#{$width+1}px;
    }
  }
  @if $side == 'right' {
    &:after, &:before {
      left: 100%;
      top: 50%;
    }
    &:after {
      border-color: $color-rgb;
      border-left-color: $color;
      border-width: #{$width}px;
      margin-top: -#{$width}px;
    }
    &:before {
      border-color: $border-color-rgb;
      border-left-color: $border-color;
      border-width: #{$width+1}px;
      margin-top: -#{$width+1}px;
    }
  }
  @if $side == 'bottom' {
    &:after {
      border-color: $border-color;
      border-top-color: $border-color;
      border-width: #{$width}px;
      margin-left: -#{$width}px;
    }
    &:before {
      border-color: $border-color;
      border-top-color: $border-color;
      border-width: #{$width+1}px;
      margin-left: -#{$width+1}px;
    }
  }
}

/* .....................................
  Mixins for CSS3 Properties
..................................... */
// make writing animations a bit easier!
@mixin keyframes($animation_name) {
  @-webkit-keyframes $animation_name {
    @content;
  }
  @-moz-keyframes $animation_name {
    @content;
  }
  @-o-keyframes $animation_name {
    @content;
  }
  @keyframes $animation_name {
    @content;
  }
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

// easier form input placeholder styling
// usage:
// .input-class {
//   @include placeholder {
//     property: value;
//   }
// }
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
    // manually overwrite FF's default opacity: .54
    // on placeholders!
    opacity: 1;
  }
  &::-moz-placeholder {
    @content;
    // manually overwrite FF's default opacity: .54
    // on placeholders!
    opacity: 1;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

/* helper function for margin and padding
......................................*/
@function set_spacer_size($name) {
  $size: 25px;
  @if $name == 'xsmall' {
    $size: 5px;
  } @else if $name == 'small' {
    $size: 10px;
  } @else if $name == 'medium' {
    $size: 20px;
  } @else if $name == 'large' {
    $size: 40px;
  } @else if $name == 'xlarge' {
    $size: 80px;
  } @else if $name == 'xxlarge' {
    $size: 160px;
  }

  @return $size;
}

@mixin spacer($type, $name, $style) {
  @if $type == 'vertical' {
    .#{$style}-vertical-#{$name} {
      #{$style}-top: set-spacer-size($name) !important;
      #{$style}-bottom: set-spacer-size($name) !important;
    }
  }
  @else if $type == 'horizontal' {
    .#{$style}-horizontal-#{$name} {
      #{$style}-left: set-spacer-size($name) !important;
      #{$style}-right: set-spacer-size($name) !important;
    }
  }
  @else {
    @if $type != '' {
      $type: '-' + $type;
    }
    .#{$style}#{$type}-#{$name} {
      #{$style}#{$type}: set-spacer-size($name) !important;
    }
  }
}

@function set_frame_size($name) {
  $size: 75px;

  @if $name == 'small' {
    $size: 75px;
  } @else if $name == 'medium' {
    $size: 125px;
  } @else if $name == 'large' {
    $size: 325px;
  } @else if $name == 'xlarge' {
    $size: 525px;
  }

  @return $size;
}


$arrow-colors: #000000, #ffffff, $gray-1, $red, $teal-2;
$arrow-classes: 'background-black', 'background-white', 'background-gray', 'is-alert', 'is-error', 'is-success';

@mixin arrow-colors($position) {
  $primary-pos: bottom;
  $secondary-pos: top;
  $tertiary-pos: left;
  $pos: left, middle, right;

  @if $position == top {
    $primary-pos: top;
    $secondary-pos: bottom;
    $tertiary-pos: left;
    $pos: left, middle, right;
  } @else if $position == right {
    $primary-pos: right;
    $secondary-pos: left;
    $tertiary-pos: bottom;
    $pos: top, middle, bottom;
  } @else if $position == left {
    $primary-pos: left;
    $secondary-pos: right;
    $tertiary-pos: top;
    $pos: top, middle, bottom;
  }

  &.arrow-#{$primary-pos}-#{nth($pos, 1)},
  &.arrow-#{$primary-pos}-#{nth($pos, 2)},
  &.arrow-#{$primary-pos}-#{nth($pos, 3)} {
    &:after {
      border-#{$secondary-pos}-color: #192b3d;
      margin-#{$tertiary-pos}: -10px;
    }
    &:before {
      border-#{$secondary-pos}-right-color: #192b3d;
      margin-#{$tertiary-pos}: -11px;
    }

    @for $i from 1 through length($arrow-colors) {
      $arrow-color: nth($arrow-colors, $i);
      $arrow-class: nth($arrow-classes, $i);
      &.#{$arrow-class} {
        background: $arrow-color;
        &:after {
          border-#{$secondary-pos}-color: $arrow-color;
        }
        &:before {
          border-#{$secondary-pos}-color: $arrow-color;
        }
      }
    }
  }
}

// $base_color is a #hex or rgba() value
// $opacity is a decimal
@mixin rgba-color($base_color, $opacity) {
  color: $base_color;
  color: transparentize($base_color, $opacity);
}

/*
  collection of prefixed flexbox properties
  until we're using Compass 1.0+
  ..........................................*/

@mixin display-flex {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin align-items-center {
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
}

@mixin justify-content-flex-end {
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
}

@mixin justify-content-center {
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

@mixin spinner-size($size) {
  width: $size;
  margin-left: -#{$size/2};
  margin-top: -#{$size/2};
}

@mixin user-select ($value: none) {
  -webkit-user-select: $value;
     -moz-user-select: $value;
      -ms-user-select: $value;
          user-select: $value;
}
